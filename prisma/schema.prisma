generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String     @unique
  phoneNumber  String?
  profileImage String?
  password     String
  role         UserRole   @default(USER)
  status       UserStatus @default(ACTIVE)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@map("Users")
  Member Member[]
  TournamentParticipant TournamentParticipant[]
  MatchParticipant MatchParticipant[]
}

model Club {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  remainingCourts Int
  remainingPlayers Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Clubs")
  Member Member[]
  Session Session[]
  Court Court[]
}

model Member {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  clubId    String   @db.ObjectId
  joinedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  club      Club     @relation(fields: [clubId], references: [id])

  @@map("Members")
  TournamentParticipant TournamentParticipant[]
}

model Session {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  clubId      String   @db.ObjectId
  name        String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  club       Club     @relation(fields: [clubId], references: [id])

  @@map("Sessions")
}

model Tournament {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  sessionId   String   @db.ObjectId
  clubId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("Tournaments")
  TournamentParticipant TournamentParticipant[]
  Match Match[]
}

model TournamentParticipant {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  memberId    String?   @db.ObjectId
  tournamentId String   @db.ObjectId
  joinedAt    DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
  tournament  Tournament @relation(fields: [tournamentId], references: [id])
  member     Member?  @relation(fields: [memberId], references: [id])

  @@map("TournamentParticipants")
}

model Match {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  tournamentId String?   @db.ObjectId
  score1      Int?
  score2      Int?
  type        MatchType @default(SINGLES)
  status      String   // e.g., "PENDING", "COMPLETED"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tournament  Tournament? @relation(fields: [tournamentId], references: [id])
  @@map("Matches")
  MatchParticipant MatchParticipant[]
}

model MatchParticipant {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  matchId    String   @db.ObjectId
  userId     String   @db.ObjectId
  score      Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  match      Match    @relation(fields: [matchId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@map("MatchParticipants")
}

model Court {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  location    String?
  clubId      String   @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  club        Club     @relation(fields: [clubId], references: [id])

  @@map("Courts")
}

enum MatchStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum MatchType {
  SINGLES
  DOUBLES
}

enum UserRole {
  ADMIN
  TEACHER
  SUPER_ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}
